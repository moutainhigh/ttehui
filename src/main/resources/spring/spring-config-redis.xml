<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:redis="http://www.springframework.org/schema/redis" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
            http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis-1.0.xsd">  
  
    <context:property-placeholder
    	ignore-unresolvable="true" location="classpath:redis.properties" />  
    
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
    	<property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxTotal" value="${redis.maxTotal}" />  
        <property name="maxWaitMillis" value="${redis.maxWait}" /> 
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>  
    
    <!-- spring-data-redis 配置 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
	    <property name="usePool" value="true" />
	    <property name="hostName" value="${redis.host}" />
	    <property name="port" value="${redis.port}" />
	    <property name="password" value="${redis.password}" />
	    <property name="timeout" value="${redis.timeout}" />
	    <property name="database" value="${redis.database}" />
	    <!-- <constructor-arg index="0" ref="jedisPoolConfig" /> -->
	    <property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
	 
	<!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
	    <property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean> -->
	
	<!-- redis 序列化策略 ，通常情况下key值采用String序列化策略， -->
	<!-- 如果不指定序列化策略，StringRedisTemplate的key和value都将采用String序列化策略； -->
	<!-- 但是RedisTemplate的key和value都将采用JDK序列化 这样就会出现采用不同template保存的数据不能用同一个template删除的问题 -->
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
	    <property name="connectionFactory" ref="jedisConnectionFactory" />
	    <property name="keySerializer" ref="stringRedisSerializer" />
	    <property name="hashKeySerializer" ref="stringRedisSerializer" />
	</bean>
	
	<!-- 更新数据库库存队列 -->
	<bean id="storageQueue" lazy-init="false" class="com.mocentre.tehui.job.queue.StorageQueue" destroy-method="destroy">  
		<property name="redisTemplate" ref="redisTemplate" />  
        <property name="key" value="stock:queue" />
	</bean>
	
	<!-- 令牌队列 -->
	<bean id="tokenQueue" class="com.mocentre.tehui.job.queue.TokenQueue">  
		<property name="redisTemplate" ref="redisTemplate" />  
		<property name="prefixKey" value="token:queue" />
	</bean>
	
	<!-- 更新数据库优惠券队列 -->
	<bean id="couponQueue" lazy-init="false" class="com.mocentre.tehui.job.cpnqueue.CouponQueue" destroy-method="destroy">  
		<property name="redisTemplate" ref="redisTemplate" />  
        <property name="key" value="coupon:queue" />
	</bean>
	
	<!-- 发送邮件队列 -->
	<bean id="mailQueue" lazy-init="false" class="com.mocentre.tehui.job.mailqueue.MailQueue" destroy-method="destroy">  
		<property name="redisTemplate" ref="redisTemplate" />  
        <property name="key" value="mail:queue" />
	</bean>
	
	<!-- 
	<bean id="jdkSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
	
	<bean id="sendMessage" class="com.mocentre.tehui.job.sdr.SendMessage">  
        <property name="redisTemplate" ref="redisTemplate"></property>  
    </bean>
    
	<bean id="topicMessageListener" class="com.mocentre.tehui.job.sdr.TopicMessageDelegateListener">  
		
    </bean> 
    
    <bean id="smsMessageListener"
        class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">
        <property name="delegate" ref="topicMessageListener" />
        <property name="serializer" ref="jdkSerializer" />
    </bean>
	
	<redis:listener-container connection-factory="jedisConnectionFactory">
        <redis:listener ref="smsMessageListener" method="handleMessage"
            serializer="jdkSerializer" topic="storage:sms" />
    </redis:listener-container>
    -->
</beans>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd 
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
       default-lazy-init="false">
    <description>Spring-orm配置文件 </description>
    
    <!--扫描com.包下包含spring 注解的类，自动注入 -->
    <context:component-scan base-package="com.mocentre.*" />
    
    <context:property-placeholder
            ignore-unresolvable="true" location="classpath*:/spring/application.properties" />
     
    <!-- 主数据源配置 -->        
    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
  		<property name="driverClassName" value="${ds0.jdbc.driverClassName}" />
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${ds0.jdbc.url}" />
	    <property name="username" value="${ds0.jdbc.username}" />
	    <property name="password" value="${ds0.jdbc.password}" />
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="2000" />
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
	    <property name="filters" value="stat" /> 
	</bean>
	
	<!-- 从数据源配置1 -->        
    <bean id="slaveDataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
  		<property name="driverClassName" value="${ds1.jdbc.driverClassName}" />
	    <property name="url" value="${ds1.jdbc.url}" />
	    <property name="username" value="${ds1.jdbc.username}" />
	    <property name="password" value="${ds1.jdbc.password}" />
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="2000" />
	    <property name="maxWait" value="60000" />
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	    <property name="filters" value="stat" /> 
	</bean>
	
	<!-- 从数据源配置2 -->        
    <bean id="slaveDataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
  		<property name="driverClassName" value="${ds2.jdbc.driverClassName}" />
	    <property name="url" value="${ds2.jdbc.url}" />
	    <property name="username" value="${ds2.jdbc.username}" />
	    <property name="password" value="${ds2.jdbc.password}" />
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="2000" />
	    <property name="maxWait" value="60000" />
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	    <property name="filters" value="stat" /> 
	</bean>
	
	<!-- 从数据源配置3 -->        
    <bean id="slaveDataSource3" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
  		<property name="driverClassName" value="${ds3.jdbc.driverClassName}" />
	    <property name="url" value="${ds3.jdbc.url}" />
	    <property name="username" value="${ds3.jdbc.username}" />
	    <property name="password" value="${ds3.jdbc.password}" />
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="2000" />
	    <property name="maxWait" value="60000" />
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	    <property name="filters" value="stat" /> 
	</bean>
	
	<!-- 多数据源 -->
    <bean id="multipleDataSource" class="com.mocentre.tehui.core.service.support.datasource.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
        <property name="targetDataSources">
            <map>
                <entry key="masterDS" value-ref="masterDataSource"/>
                <entry key="slaveDS1" value-ref="slaveDataSource1"/>
                <entry key="slaveDS2" value-ref="slaveDataSource2"/>
                <entry key="slaveDS3" value-ref="slaveDataSource3"/>
            </map>
        </property>
    </bean>
            
    <!-- 事物管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="multipleDataSource" />
    </bean>
    <!-- 事物管理模板 -->
    <bean id="transactionTemplate"
          class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager" />
    </bean>
    
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="multipleDataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <property name="typeAliasesPackage" value="com.mocentre.tehui.buy.model,com.mocentre.tehui.core.model,com.mocentre.tehui.fee.model,com.mocentre.tehui.goods.model,com.mocentre.tehui.lottery.model,com.mocentre.tehui.ps.model,com.mocentre.tehui.shop.model,com.mocentre.tehui.sub.model,com.mocentre.tehui.system.model,com.mocentre.gift.ps.model,com.mocentre.gift.gd.model" />
        <property name="mapperLocations" value="classpath*:mybatis/*mapper/**/*.xml" />
    </bean>
    
     <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true" />

    <tx:advice id="readTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="query*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="read*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    
    <bean id="dataSourceMethodInterceptor" class="com.mocentre.tehui.core.service.support.datasource.DataSourceMethodInterceptor"/>
 
    <aop:config>
        <aop:pointcut id="servicePC" expression="execution(* com.mocentre.*.*.service.*.*(..))" />
        <!-- 关键配置，切换数据源一定要比持久层代码更先执行（事务也算持久层代码） -->
        <aop:advisor pointcut-ref="servicePC" advice-ref="readTxAdvice" order="2"/>
        <aop:advisor pointcut-ref="servicePC" advice-ref="dataSourceMethodInterceptor" order="1"/>
    </aop:config>
    
    <!-- 启用aop  -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- <bean id="dataSourceMethodInterceptor" class="com.mocentre.tehui.core.service.support.datasource.DataSourceMethodInterceptor"/> -->
    <!-- 
    <bean id="dataSourceMethodCachePointCut" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="dataSourceMethodInterceptor" />
        <property name="patterns">
            <list>
                <value>com.mocentre.tehui.*.dao.*Dao*\.*.*</value>
                <value>com.mocentre.tehui.*.dao.impl.*Dao*\.*.*</value>
            </list>
        </property>
    </bean> -->
    
	<import resource="classpath:spring/spring-config-redis.xml" />
    <import resource="classpath:spring/spring-dubbo-provider.xml" />
    <import resource="classpath:spring/spring-config-quartz.xml" />
    
</beans>

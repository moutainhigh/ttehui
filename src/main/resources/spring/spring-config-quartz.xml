<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">  
  
	<!-- ======================== 调度工厂 ======================== -->
    <bean id="quartzScheduler" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
    	<property name="dataSource" ref="masterDataSource" />
        <property name="schedulerName" value="MyScheduler"/>
        <property name="configLocation" value="classpath:quartz.properties" />  
        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->    
        <property name="overwriteExistingJobs" value="true" /> 
        <!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->  
        <property name="startupDelay" value="30" /> 
        <property name="autoStartup" value="true" />
        <property name="schedulerContextAsMap">      
            <map>      
                <!-- spring 管理的service需要放到这里，才能够注入成功 -->      
                <description>schedulerContextAsMap</description>      
                <entry key="orderService" value-ref="orderService"/>      
                <entry key="orderDetailService" value-ref="orderDetailService"/>
                <entry key="grouponService" value-ref="grouponService"/>
                <entry key="orderPayService" value-ref="orderPayService"/>
                <entry key="orderRefundService" value-ref="orderRefundService"/>
            </map>      
        </property>      
        <!--applicationContextSchedulerContextKey：   
		        是org.springframework.scheduling.quartz.SchedulerFactoryBean这个类中  
		        把spring上下 文以key/value的方式存放在了quartz的上下文中了，  
		        可以用applicationContextSchedulerContextKey所定义的key得到对应的spring上下文-->    
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>       
        <property name="triggers">  
	        <list>  
	            <ref bean="orderCloseTriggerBean"/>  
	            <ref bean="grouponRefundTriggerBean"/>
	        </list>  
	    </property>  
    </bean>  
    
	<!-- JobDetailBean -->     
    <bean id="orderCloseJobBean" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">    
		<!-- durability 表示任务完成之后是否依然保留到数据库，默认false --> 
		<property name="durability" value="true" />
		<property name="jobClass" value="com.mocentre.tehui.job.OrderCloseJob"></property>   
	</bean>
	<bean id="grouponRefundJobBean" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">    
		<!-- durability 表示任务完成之后是否依然保留到数据库，默认false --> 
		<property name="durability" value="true" />
		<property name="jobClass" value="com.mocentre.tehui.job.GrouponRefundJob"></property>   
	</bean>
	<!-- 
	<bean id="syncStorageJobBean" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">    
		<property name="durability" value="true" />
		<property name="jobClass" value="com.mocentre.tehui.job.SyncStorageJob"></property>   
	</bean>
	 -->
	<!-- ======================== 调度触发器 ======================== -->
	<bean id="orderCloseTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="orderCloseJobBean"></property>
	    <property name="cronExpression" value="10 * * * * ?"></property>
	</bean>  
	<bean id="grouponRefundTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="grouponRefundJobBean"></property>
	    <property name="cronExpression" value="* 10 * * * ?"></property>
	</bean>  
	<!-- 
    <bean id="syncStorageTriggerBean" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
	    <property name="jobDetail" ref="syncStorageJobBean"></property>
	    <property name="startDelay" value="1000"/>
	    <property name="repeatInterval" value="0"/>
	    <property name="repeatCount" value="0"/>
	</bean> 
	 -->
</beans>